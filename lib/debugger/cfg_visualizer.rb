# typed: strict
require "sorbet-runtime"
require_relative "debugger"
require_relative "../analysis/cfg"

# The CFGVisualizer module provides functions to visualize CFG objects.
module Debugger::CFGVisualizer
  extend T::Sig

  sig { params(cfg: CFG).returns(String) }
  # Generate a String representation of the CFG in the Graphviz DOT language.
  # @return [String] A String containing DOT code.
  def self.generate_graphviz(cfg)
    str = "// Generated by lilac\n"
    str += "digraph {\n"

    # define blocks
    cfg.each_block { |b|
      name = b.number
      shape = "box"
      if b == cfg.entry
        name = "ENTRY"
        shape = "diamond"
      elsif b == cfg.exit
        name = "EXIT"
        shape = "diamond"
      end

      str += "#{name} [shape=#{shape}]\n"
    }

    # define edges
    cfg.each_edge { |e|
      from_name = e.from.number
      if e.from == cfg.entry then from_name = "ENTRY"
      elsif e.from == cfg.exit then from_name = "EXIT" end

      to_name = e.to.number
      if e.to == cfg.entry then to_name = "ENTRY"
      elsif e.to == cfg.exit then to_name = "EXIT" end

      str += "#{from_name} -> #{to_name} [constraint=false]\n"
    }

    str += "}"
  end
end
