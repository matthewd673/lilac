# typed: strict
require "sorbet-runtime"
require_relative "debugger"
require_relative "../graph"
require_relative "../analysis/bb"

# The CFGVisualizer module provides functions to visualize CFG objects.
module Debugger::GraphVisualizer
  extend T::Sig

  sig { params(graph: Graph[T.untyped]).returns(String) }
  # Generate a String representation of the graph in the Graphviz DOT language.
  #
  # @param [Graph] graph The graph to visualize.
  # @return [String] A String containing DOT code.
  def self.generate_graphviz(graph)
    str = "// Generated by Lilac\n"
    str += "digraph {\n"

    # define blocks
    graph.each_node { |n|
      name = n.to_s
      label = name
      shape = "box"

      # special case for CFGs
      if n.is_a?(Analysis::BB)
        name = n.id
        label = n.id
        if n.id == Analysis::CFG::ENTRY
          label = "ENTRY"
          shape = "diamond"
        elsif n.id == Analysis::CFG::EXIT
          label = "EXIT"
          shape = "diamond"
        end
      end

      str += "#{name} [label=#{label} shape=#{shape}]\n"
    }

    # define edges
    graph.each_edge { |e|
      from_name = e.from.id
      # if e.from == graph.entry then from_name = "ENTRY"
      # elsif e.from == graph.exit then from_name = "EXIT" end

      to_name = e.to.id
      # if e.to == graph.entry then to_name = "ENTRY"
      # elsif e.to == graph.exit then to_name = "EXIT" end

      str += "#{from_name} -> #{to_name} [constraint=false]\n"
    }

    str += "}"
  end
end
